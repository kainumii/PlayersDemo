@page "/interop"

@inject IJSRuntime IJSRuntime
@using PlayersDemo.Data.Models
@using System.Drawing

<h3>Interop</h3>

<h5>Call a Javascript function that returns void</h5>
<button class="btn btn-primary" @onclick="ReturnsVoid">Returns void</button>
<hr/>

<h5>Pass a .Net object to Javascript function</h5>
<button class="btn btn-primary" @onclick="PassObject">Pass object</button>
<hr />

<h5>Call javascript function that returns a value</h5>
<button class="btn btn-primary" @onclick="ReturnsValue">Return a value</button>
<div>@Result</div>
<hr/>

<h5>Get object as a Return value</h5>
<button class="btn btn-primary" @onclick="ObjectAsReturnValue">Get object as a return value</button>
<div>@Player?.LastName @Player?.FirstName @Player?.IsRight @Player?.Position</div>
<hr />

<h5>Pass HTML element reference</h5>
<div class="form-group">
    <label>Element to focus</label>
    <input @ref="elementToFocus" type="text" class="form-control mb-3"/>
</div>
<button class="btn btn-primary" @onclick="PassHtmlElementReference">Pass Html element reference</button>
<hr />

<h5>Call static .Net method from JS</h5>
<button class="btn btn-primary" onclick="interop.CallStaticDotNetMethod()">Call Static .Net Method from JS</button>
<hr />

<h5>Call .Net instance method from JS</h5>
<div>Window size @WindowSize.Width x @WindowSize.Height</div>
<button class="btn btn-primary" @onclick="PassDotNetInstanceToJS">Test</button>
<hr />

<h5>Check Location</h5>
<button class="btn btn-primary" @onclick="GetLocation">Get Location</button>
<div>Current Coordinates: @Coords?.Latitude @Coords?.Longitude</div>
<hr />

@code {
    private string? Result { get; set; } = "";
    private Player? Player { get; set; }
    private ElementReference elementToFocus;
    private Size WindowSize;
    private Coords? Coords { get; set; }

    // Call JavaScript methods from .NET
    // *********************************

    private async Task ReturnsVoid() 
    {
        await IJSRuntime.InvokeVoidAsync("interop.showAlert", "Hello!!");
    }

    private async Task PassObject()
    {
        Player p = new Player { 
            FirstName = "Aku", 
            LastName = "Ankka", 
            Position = Position.Forward
        };
        await IJSRuntime.InvokeVoidAsync("interop.passObject", p);
    }

    private async Task ReturnsValue()
    {
        Result = await IJSRuntime.InvokeAsync<string>("interop.returnsValue");
    }

    private async Task ObjectAsReturnValue()
    {
        Player = await IJSRuntime.InvokeAsync<Player>("interop.objectAsReturnValue", "Tikka", "Masala", Position.GoalKeeper);
    }

    private async Task PassHtmlElementReference()
    {        
        await IJSRuntime.InvokeVoidAsync("interop.focus", elementToFocus);
    }

    // Call .Net methods from JavaScript
    // *********************************

    // DotNet.invokeMethodAsync("PlayersDemo", "BuildEmail", "Miikka");
    // Promise {<pending>}
    //     [[Prototype]]: Promise
    //     [[PromiseState]]: "fulfilled"
    //     [[PromiseResult]]: "Miikka@foo.com"

    [JSInvokable]
    public static string BuildEmail(string fname)
    {
        return $"{fname}@foo.com";
    }

    [JSInvokable]
    public void SetWindowSize(Size size)
    {
        WindowSize = size;
        StateHasChanged();
    }

    private async Task PassDotNetInstanceToJS()
    {
        // "this" doesnt work here
        // IJSRuntime.InvokeVoidAsync("interop.xxxxxxxxxx", this);
        // Use reference!

        //var reference = DotNetObjectReference.Create(this);
        //await IJSRuntime.InvokeVoidAsync("interop.callDotNetInstanceMethod", reference);
    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) 
        {
            var reference = DotNetObjectReference.Create(this);
            await IJSRuntime.InvokeVoidAsync("interop.registerResizeHandler", reference);            
        }
    }

    private async Task GetLocation()
    {
        var reference = DotNetObjectReference.Create(this);
        await IJSRuntime.InvokeVoidAsync("interop.getLocation", reference);
    }

    [JSInvokable]
    public void SetCurrentGeolocation(Coords coords)
    {
        Coords = coords;
        StateHasChanged();
    }
}   
